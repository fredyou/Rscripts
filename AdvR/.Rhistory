test=function(x){t=list(t="test",a="testa");list2env(t,envir = parent.frame())}
test(1)
t
a
test=function(x){t=list(t="test1",a="testa1");list2env(t,parent = parent.frame())}
test(1)
1
a
t
test=function(x){t=list(t="test1",a="testa1");env=list2env(t,parent = parent.frame());parent.env(env )}
test()
plyr::arrange()
plyr::arrange
substitute(order(...))
test=function(...){order(substitute(...))}
test(1,2,3,4)
test=function(...){eval(order(substitute(...)))}
test(1,2,3,4)
test=function(...){eval(substitute(order(...)))}
test(1,2,3,4)
sample_df
test=function(df,...){eval(substitute(order(...)),df)}
test(sample_df,1,2,3,4)
test(sample_df,a)
test(sample_df,a,b)
test(sample_df,b)
test(sample_df,a,b)
plyr::arrange(sample_df,a,b)
sample_df
plyr::arrange(sample_df,b)
order(sample_df$a,sample_df$b)
test=function(df,...){substitute(order(...))}
test(sample_df,a,b)
transform()
transform
?transform
transform.data.frame
test=function(...){eval(substitute(list(...)),sample_df,parent.frame())}
sample_df
test(a,b,c)
test=function(...){substitute(list(...))}
test(a,b,c)
test=function(...){eval(substitute(list(...)),sample_df,parent.frame())}
test(a=-a)
list(sample_df)
test(a,b,c)
newlist=test(a,b,c)
list(sample_df)
c(list(sample_df),newlist)
data.frame(c(list(sample_df),newlist))
df <- data.frame(x = 1:5)
transform(df, x2 = x * x, x3 = x2 * x)
plyr::mutate(df, x2 = x * x, x3 = x2 * x)
plyr::mutate
?mutate
test=function(...){as.list(substitute(list(...))[-1])}
test(a,b,c)
test=function(...){as.list(substitute(list(...)))}
test(a,b,c)
test(a=xx,b=ff,c=ss)
substitute(list(a=xx,b=ff))
as.list(substitute(list(a=xx,b=ff)))
transform.data.frame
test=function(...){eval(substitute(list(...)),sample_df,parent.frame())}
test(a,b,c)
test=function(.data,...){
cols <- as.list(substitute(list(...))[-1])
eval(cols[[ names(cols)[1] ]], .data, parent.frame())
}
test(sample_df,x2 = x * x, x3 = x2 * x)
test=function(.data,...){
cols <- as.list(substitute(list(...))[-1])
cols
eval(cols[[ names(cols)[1] ]], .data, parent.frame())
}
test(sample_df,x2 = x * x, x3 = x2 * x)
test=function(.data,...){
cols <- as.list(substitute(list(...))[-1])
print(cols)
eval(cols[[ names(cols)[1] ]], .data, parent.frame())
}
test(sample_df,x2 = x * x, x3 = x2 * x)
test=function(.data,...){
cols <- as.list(substitute(list(...))[-1])
print(cols)
print(class(cols[[1]]))
eval(cols[[ names(cols)[1] ]], .data, parent.frame())
}
test(sample_df,x2 = x * x, x3 = x2 * x)
transform
transform.data.frame
test=function(...){eval(substitute(list(...)),sample_df,parent.frame())}
test(a=-a,b,c) #get a list of a,b,c cols in sample_df
substitute(list(a=sdf,dfd=x))
class(substitute(list(a=sdf,dfd=x)))
str(substitute(list(a=sdf,dfd=x)))
?within
with(a-1,sample_df)
with(sample_df,a-1)
within(sample_df,a-1)
sample_df
example(within)
with.default
within.data.frame
evalq(environment(), sample_df, parent.frame())
q=evalq(environment(), sample_df, parent.frame())
q$a
eval(environment(), sample_df, parent.frame())
environment()
eval(a+b,sample_df,parent.frame())
environment(sample_df)
q
debugonce(within.data.frame)
within.data.frame(sample_df,a+1)
parent
parent
e
e$a
l
l
eval(substitute(expr), e)
eval(substitute(expr), e)
eval(substitute(expr), e)
eval(substitute(expr), e)
expr
e
substitute(expr)
e
e$a
n
nl
data
e
e$a
e$b
e$c
eval(substitute(a-1), e)
e
e$a
within.data.frame
within.data.frame(sample_df,a-1)
within.data.frame(sample_df,a-100)
within.data.frame(sample_df,a-100)
within.data.frame(sample_df,a=a-100)
within.data.frame(sample_df,a<-a-100)
within.data.frame(sample_df,a=a-100)
sample_df
with.default(sample_df,a=a-100)
with.default(sample_df,a-100)
with.default(sample_df,a=a-100)
with.default(sample_df,a<-a-100)
sample_df
within.data.frame(sample_df,a=a-100)
`=`
eval(substitute(a=a-100),sample_df)
eval(substitute(a<-a-100),sample_df)
sample_df
e=new.env()
e$a="dfsadf"
eval(substitute(a=11),e)
eval(substitute(a<-11),e)
e
e$a
`<-`
within.data.frame(sample_df,a<-a-100)
sample_df
eval(substitute(a-1),sample_df)
eval(substitute(a=a-1),sample_df)
eval(substitute(a<a-1),sample_df)
eval(substitute(a<-a-1),sample_df)
sample_df
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x, parent.frame())
x[r, ]
}
scramble <- function(x) x[sample(nrow(x)), ]
subscramble <- function(x, condition) {
scramble(subset2(x, condition))
}
subscramble(sample_df, a >= 4)
debugonce(subset2)
subscramble(sample_df, a >= 4)
condition
condition_call
debugonce(subset2)
subset2(sample_df, a >= 4)
condition
condition_call
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
a<-4
subset2_q<-function(df,con){
r<-eval(con,df)
x[r,]
}
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
subset2_q(sample_df,a<10)
subset2_q<-function(df,con){
r<-eval(con,df)
df[r,]
}
subset2_q(sample_df,a<10)
subset2_q(sample_df,a<>2)
subset2_q(sample_df,a>2)
eval(a>2,sample_df)
a
rm(a)
eval(a>2,sample_df)
eval(a,sample_df)
eval(a,sample_df,envir = parent.frame())
eval(substitute(a),sample_df)
subset2_q(sample_df,substitute(a>2))
subset2_q<-function(df,con){
r<-eval(con,df,parent.frame()) #to get what con really is ,envir should be parent call
df[r,]
}
?rm
rm
tl <- data.frame(a = rnorm(20), b = rpois(20, 10))
tl <- within(tl, new <- sum(a, b))
t
t1
tl
tl
tl <- within(tl, new <- sum(a, b))
tl
tl <- data.frame(a = rnorm(20), b = rpois(20, 10))
tl
tl <- within(tl, new <- sum(a, b))
tl
rm
test=function(...){dots <- match.call(expand.dots = FALSE)$...}
test=function(...){dots <- match.call(expand.dots = FALSE)$...;dots}
test(adf,df,s)
library
edit(library)
substitute("aa")
as.character(substitute("aa"))
substitute
?substitute
data
test(dd,ff,ss)
test2=function(...){as.character(substitute(list(...))[-1L])}
test2(dd,ff,cc)
page
?page
page("page")
page(page)
plyr::mutate
test
test=function(...){substitute(list(...))[-1L]}
test(ss,ff,vv<aa)
test=function(...){as.list(substitute(list(...))[-1L])}
test(ss,ff,vv<aa)
tlist=test(ss,ff,vv<aa)
class(tlist[[1]])
class(tlist[[2]])
class(tlist[[3]])
match.call(tlist)
?match.call
test=function(...){as.list(substitute(list(...))[-1L])}
test=function(...){dots<-match.call(expand.dots=F)}
tlist=test(ss,ff,vv<aa)
tlist
tlist$...
tlist=tlist$...
class(ss)
class(tlist[[1]])
class(tlist[[3]])
test=function(...){as.list(substitute(list(...))[-1L])}
tlist=test(ss,ff,vv<aa,1,2)
tlist
class(tlist[[4]])
test=function(...){as.list(substitute(list(...))[-1L])}
test(asdf,sfd)
mutate=function (.data, ...)
{
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
for (col in names(cols)) {
.data[[col]] <- eval(cols[[col]], .data, parent.frame())
}
.data
}
mutate(sample_df,a-)
mutate(sample_df,a-1)
mutate(sample_df,a<-a-1)
sample_df
test(a<a-1)
mutate(sample_df,a<- a-1)
mutate(sample_df,a<- (a-1))
mutate(sample_df,a <- (a-1))
test(a<a-1)
mutate(sample_df,a )
mutate(sample_df,c )
mutate(sample_df,x)
mutate=function (.data, ...)
{
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
for (col in names(cols)) {
.data[[col]] <- eval(cols[[col]], .data, parent.frame())
}
.data
}
mutate(sample_df,x)
mutate(sample_df,xfsadf)
mutate(sample_df,a=b+c)
mutate(sample_df,a<-a+c)
mutate(sample_df,a=a+c)
eval(a<-a+!,sample_df)
eval(a<-a+1,sample_df)
eval(a<- a+1,sample_df)
eval(a<- a+1,sample_df,parent.frame())
eval(substitute(a<- a+1),sample_df,parent.frame())
sample_df
eval(substitute(a= a+1),sample_df,parent.frame())
debugonce(mutate)
mutate(sample_df,a = (a-1))
cols
data$a
.data$a
cols
cols[["a"]]
sample_df
debugonce(mutate)
mutate(sample_df,a <- (a-1))
cols
substitute(a<-a-1)
substitute(a=-a-1)
substitute(a=a-1)
substitute(a=a-1,ss)
substitute(list(a=a-1,ss))
substitute(list(a<-a-1,ss))
as.list(substitute(list(a<-a-1,ss)))
as.list(substitute(list(a=a-1,ss)))
as.list(substitute(list(a=a-1,a==3)))
as.list(substitute(list(a=a-1,a==3)))
sample_df
x=sample_df$c
x
c=x
rm(x)
c=1:5
c
mutate(sample_df,c=c*1)
mutate=function(.data,...){
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
mutate_p=function(.data,cols){
for (col in names(cols)) {
.data[[col]] <- eval(cols[[col]], .data, parent.frame())
}
.data
}
mutate=function(.data,...){
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
mutate_p=function(.data,cols){
for (col in names(cols)) {
.data[[col]] <- eval(cols[[col]], .data, parent.frame())
}
.data
}}
mutate_p=function(.data,cols){
for (col in names(cols)) {
.data[[col]] <- eval(cols[[col]], .data, parent.frame())
}
.data
}
mutate=function(.data,...){
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
mutate_p(.data,cols)
}
mutate(sample_df,c=c*1)
mutate(sample_df,c=c*2)
capDots<-function(...){
cols <- as.list(substitute(list(...))[-1])
cols <- cols[names(cols) != ""]
cols
}
mutate=function(.data,...){
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
#   cols <- as.list(substitute(list(...))[-1])
#   cols <- cols[names(cols) != ""]
cols=capDots(...)
mutate_p(.data,cols)
}
mutate(sample_df,c=c*2)
test=function(.data,...){
stopifnot(is.data.frame(.data) || is.list(.data) || is.environment(.data))
#   cols <- as.list(substitute(list(...))[-1])
#   cols <- cols[names(cols) != ""]
cols=capDots(...);cols}
test(sample_df,dd=cc)
ggplot2::aes
plyr::()
test=function(x,y,...){match.call()[-1]}
test(x,y,dfa)
test=function(x,y,...){match.call()}
test(x,y,dfa)
test=function(x,y,...){as.list(match.call())}
test(x,y,dfa)
test(x,y,dfa)$[[1]]
test(x,y,dfa)[[1]]
test=function(x,y,...){as.list(match.call()[-1])}
test(x,y,dfa)[[1]]
test(x,y,dfa)
test(x,y,dfa)[[1]]
test(x,y,dfa)[[2]]
plyr::()
plyr()
plyr::tryNULL()
plyr::tryNULL
test=function(x,...){test2(x,...)}
test2=function(){}
test2=function(a,...){l=listsubstitute(a)}
test2=function(a,...){l=list(first=substitute(a),secon=substitute(...));l}
test(x,dfs,sdfa)
test(x,dfs,sdfa==1)
test(x,dfs==2,sdfa==1)
t="asdf"
test(x,dfs==t,sdfa==1)
test2=function(a,...){l=list(first=substitute(a),secon=substitute(list(...)));l}
test(x,dfs==t,sdfa==1)
mutate
mutate(sample_df,a=a-1)
mutate(sample_df,a=a-t)
t
t=1
mutate(sample_df,a=a-t)
capDots(a=a-t)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x, parent.frame())
x[r, ]
}
scramble <- function(x) x[sample(nrow(x)), ]
subscramble <- function(x, condition) {
scramble(subset2(x, condition))
}
##But it doesnt work:
subscramble(sample_df, a >= 4)
capDots(condition)
capDots(a>=4)
capDots(a=a-4)
capCon<-function(con){
substitute(con)
}
subset2_q<-function(df,con){
r<-eval(con,df,parent.frame()) #to get what con really is ,envir should be parent call
df[r,]
}
subscramble <- function(x, condition) {
scramble(subset2_q(x, capCon(condition)))
}
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x, parent.frame())
x[r, ]
}
scramble <- function(x) x[sample(nrow(x)), ]
subscramble <- function(x, condition) {
scramble(subset2(x, condition))
}
##But it doesnt work:
subscramble(sample_df, a >= 4)
capCon<-function(con){
substitute(con)
}
subset2_q<-function(df,con){
r<-eval(con,df,parent.frame()) #to get what con really is ,envir should be parent call
df[r,]
}
subscramble <- function(x, condition) {
scramble(subset2_q(x, capCon(condition)))
}
subscramble(sample_df, a >= 4)
capCon<-function(con){
substitute(con)
}
subset2_q<-function(df,con){
r<-eval(con,df,parent.frame()) #to get what con really is ,envir should be parent call
df[r,]
}
subscramble <- function(x, condition) {
scramble(subset2_q(x, capCon(condition)))
}
subscramble(sample_df, a >= 4)
capCon(a>=4)
subset2_q(sample_df,capCon(a>=4))
debugonce(subscramble)
subscramble(sample_df, a >= 4)
debugonce(subset2_q)
subscramble(sample_df, a >= 4)
con
subset2_q<-function(df,con){
r<-eval(con,df) #to get what con really is ,envir should be parent call
df[r,]
}
subscramble(sample_df, a >= 4)
subset2_q<-function(df,con){
r<-eval(con,df,parent.frame()) #to get what con really is ,envir should be parent call
df[r,]
}
subscramble(sample_df, a >= 4)
