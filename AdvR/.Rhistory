df=data.frame()
composite <- function(f, a, b, n = 10, rule) {
points <- seq(a, b, length = n + 1)
area <- 0
for (i in seq_len(n)) {
area <- area + rule(f, points[i], points[i + 1])
#Here rule is either function midpoint or trapezoid defined early at start.
}
area
}
midpoint <- function(f, a, b) {
(b - a) * f((a + b) / 2) #矩形面积
}
trapezoid <- function(f, a, b) {
(b - a) / 2 * (f(a) + f(b)) #梯形面积
}
boole <- function(f, a, b) {
pos <- function(i) a + i * (b - a) / 4
fi <- function(i) f(pos(i))
(b - a) / 90 *
(7 * fi(0) + 32 * fi(1) + 12 * fi(2) + 32 * fi(3) + 7 * fi(4))
}
newton_cotes <- function(coef, open = FALSE) {
n <- length(coef) + open
function(f, a, b) {
pos <- function(i) a + i * (b - a) / n
points <- pos(seq.int(0, length(coef) - 1))
(b - a) / sum(coef) * sum(f(points) * coef)
}
}
boole <- newton_cotes(c(7, 32, 12, 32, 7))
milne <- newton_cotes(c(2, -1, 2), open = TRUE)
namedlist=function(...){
result=list(...)
#sapply(substitute(list(a="ff",1)),deparse) this step convert all vector with assigned name
#so all we have to do is find out which one doesnt have a name and assign it.
lnames=sapply(substitute(list(...)),deparse)[-1] #remove "list" in the vector
if(is.null(nm<-names(result))) nm<-lnames
if (any(nonames <- nm=="")) nm[nonames] <- lnames[nonames]
setNames(result,nm)
}
rules=namedlist(milne,boole,midpoint,trapezoid)
n=10
rule=rules[1]
rule
sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule = rule))
rule=rules[[1]]
sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule = rule))
rule
for(rule in rules){print(rule)}
for(rule in rules){print(names(rule))}
rules
names(rules)
rules["milne"]
rules[["milne"]]
rule
rule="milne"
df[,rule]sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule = rules[[rule]]))
df[,rule]=sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule = rules[[rule]]))
df[,rule]=sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule =rules[[rule]]))
df
df$a="sss"
df=list()
df[["aa"]]="fff"
df
df=list()
df
df[[rule]]=sapply(seq_len(n),function(x) composite(sin, 0, pi, n = x, rule=rules[[rule]]))
df
func=sin
func
df=list()
for (rule in names(rules)){
df[[rule]]=sapply(seq_len(n),function(x) composite(func, 0, pi, n = x,rule=rules[[rule]]))
}
df$npieces=seq_len(n)
df
df=as.data.frame(df)
sd
df
df[.-"npieces"]
df[,-"npieces"]
df[,-dim(df)[2]]
test=df[,-"npieces"]
test=df[,-dim(df)[2]]
apply(test,1,sd)
min(apply(test,1,sd))
which.min(apply(test,1,sd))
plot(x = df$npieces,y = df$\)
plot(x = df$npieces,y = df$milne)
require(reshape2)
melt
install.packages("reshape2")
require(reshape2)
melt
?melt
example(melt)
melt(df)
melt(airquality, id=c("month", "day"))
names(airquality) <- tolower(names(airquality))
melt(airquality, id=c("month", "day"))
names(airquality) <- tolower(names(airquality))
melt(airquality, measure.vars =c("month", "day"))
head(airquality)
melt(df,id="npieces")
df=melt(df,id="npieces")
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
require(ggplot)
library(ggplot2)
install.packages("ggplot2",dependencies = T)
require(ggplot2)
install.packages("colorspace")
require(ggplot2)
require(colorspace)
library(colorspace)
library(ggplot2)
install.packages("ggplot")
library(ggplot2)
library(ggplot)
library(ggplot)
library(ggplot)
library(ggplot2)
library(ggplot2)
install.packages("colorspace")
install.packages("colorspace")
install.packages("colorspace")
library(colorspace)
install.packages("colorspace")
library(colorspace)
library(ggplot2)
class(df)
df
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=5)
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=3)
cat("The number of pieces is: ",npieces, "to make rule sd minimized\n")
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=2)
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=4)
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=12)
?pch
ggplot(df,aes(x=npieces,y=value,fill=variable))+geom_point(pch=19)
ggplot(df,aes(x=npieces,y=value,fill=variable,color=variable))+geom_point(pch=19)
ggplot(df,aes(x=npieces,y=value,fill=variable,color=variable))+geom_point(pch=19)+theme_bw()
