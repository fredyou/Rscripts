lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
res=lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
res
mtcars$disp
data
q()
?partial
??partial
library(pryr)
compact2 <- partial(Filter, Negate(is.null))
compact2
compact1 <- function(x) Filter(Negate(is.null), x)
ccompact1
compact1
rpois(1, 5)
f <- partial(runif, n = rpois(1, 5))
f
f()
f()
f()
f()
f()
f2=function(){runif(rpois(1,5))}
f2()
f2()
f2()
f <- partial(runif, n = rpois(1, 5),.lazy=FALSE)
F()
f()
f()
f()
f()
f()
f()
f()
f()
f()
install.packages(c("memoise", "plyr", "pryr"))
install.packages(c("memoise", "plyr", "pryr"))
basename("http://dfsfa")
library(memorise)
library(memoise)
fib=function(n){
if (n < 2) return(1)
fib1<<-fib(n - 2) ; fib2<<-fib(n - 1)
fib1+fib2
}
fib(3)
fib(5)
fib(6)
fib1
fib2
fib <- function(n) {
if (n < 2) return(1)
fib(n - 2) + fib(n - 1)
}
fib(3)
fib(5)
fib(6)
memoise
new_cache
memorise::new_cache
memoise::new_cache
memoise:::new_cache
dot_every <- function(n, f) {
i <- 1
function(...) {
if (i %% n == 0) cat(".")
i <<- i + 1
f(...)
}
}
dot_every(10, runif)
dot_every(10, runif(2))
dot_every(10, runif())(2)
dot_every(10, runif)(2)
memoise(delay_by(1, download_file))
class(memoise(delay_by(1, download_file)))
lapply(urls, dot_every(10, delay_by(1, download_file)))
lapply(1:100, dot_every(10, runif))
lapply("a", dot_every(10, runif))
lapply(1:100, dot_every(10, runif))
runifm <- memoise(runif)
runifm
cache
digest(list(5))
memoise:::digest
?digest
digest
digest(5)
library(digest)
digest(5)
digest(list(5))
digest(list(5))
digest(list(5))
digest(list(5))
digest(list(5))
digest(5)
digest(5)
digest(5)
memoise:::new_cache
memoise
e=new.env()
e$getvalue=function(x){get(x,envir = e)}
e$a="ddd"
e$getvalue("a")
get("a")
g <- function(x) cos(x) - x
zero <- uniroot(g, c(-5, 5))
zero
show_x <- function(x, ...) cat(sprintf("%+.08f", x), "\n")
tee
zero <- uniroot(tee(g, on_input = show_x), c(-5, 5))
tee <- function(f, on_input = ignore, on_output = ignore) {
function(...) {
on_input(...)
output <- f(...)
on_output(output)
output
}
}
zero <- uniroot(tee(g, on_input = show_x), c(-5, 5))
show_x <- function(x, ...) cat(sprintf("%+.08f", x), "\n")
zero <- uniroot(tee(g, on_input = show_x), c(-5, 5))
ignore <- function(...) NULL
zero <- uniroot(tee(g, on_input = show_x), c(-5, 5))
zero <- uniroot(tee(g, on_input = show_x), c(-5, 5))
zero
uniroot
remember <- function() {
memory <- list()
f <- function(...) {
# This is inefficient!
memory <<- append(memory, list(...))
invisible()
}
structure(f, class = "remember")
}
as.list.remember <- function(x, ...) {
environment(x)$memory
}
print.remember <- function(x, ...) {
cat("Remembering...\n")
str(as.list(x))
}
###test remember func
locs <- remember()  #create a list of memory that append itself args foreach looop
vals <- remember()
zero <- uniroot(tee(g, locs, vals), c(-5, 5))
locs
x <- unlist(as.list(locs))
error <- unlist(as.list(vals))
error
x
zero
rnrom( 16,4)
rnorm(100,16,4)
test=rnorm(100,16,4)
which(test>10 && test<20)
which(10<test<20)
which(test>10 & test<20)
which(test>10 & test<20)/100
length(which(test>10 & test<20))/100
test=rnorm(100,16,4)
length(which(test>10 & test<20))/100
test=rnorm(100,16,4)
test=rnorm(100,16,4)
length(which(test>10 & test<20))/100
length(which(test>10 & test<20))/100
function(x){test=rnorm(x,16,4);length(which(test>10 & test<20))/100}
rtest=function(x){test=rnorm(x,16,4);length(which(test>10 & test<20))/100}
rtest(100)
rtest(100)
rtest(100)
rtest(100)
rtest(100)
rtest=function(x){test=rnorm(x,16,4);length(which(test>10 & test<20))/100}
rtest(100)
rtest(100)
rtest(100)
rtest(100)
rtest(100)
rtest(100)
rtest(100)
?timestamp
date()
date()
date()
delay_by <- function(delay, f) {
function(...) {
f(...)
Sys.sleep(delay)
}
}
f=function(){print("Executed once")}
g<-delay_by(1,f);g();Sys.sleep(2);g()
delay_by <- function(delay, f) {
function(...) {
f(...)
Sys.time()
Sys.sleep(delay)
}
}
f=function(){print("Executed once")}
g<-delay_by(1,f);g();Sys.sleep(2);g()
delay_by <- function(delay, f) {
function(...) {
f(...)
print(Sys.time())
Sys.sleep(delay)
}
}
f=function(){print("Executed once")}
g<-delay_by(1,f);g();Sys.sleep(2);g()
g<-delay_by(1,f);g();Sys.sleep(2);g()
Sys.time()
?Sys.time()
test=Sys.time()
test-Sys.time()
class(test-Sys.time())
methods("difftime")
isS4("difftime")
isS4(difftime)
methods(class="difftime")
as.double(test-Sys.time())
x<-test-Sys.time()
x
rm(x)
test=function(){time=Sys.time();function(){print("executed");print(time)}}
x=test()
x()
x()
x()
x()
x()
x()
delay_by <- function(delay, f) {
time=NULL
function(...) {
if(is.null(time)){
res=f(...)
time<<-Sys.time()
res
}
if(as.double(Sys.time()-time)>=delay){
f(...)
time<<-Sys.time()
}else{
Sys.sleep(delay-as.double(Sys.time()-time))
f(...)
time<<-Sys.time()
}
}
}
g<-delay_by(1,f);g();Sys.sleep(2);g()
f=function(){print("Executed once");print(Sys.time())}
g<-delay_by(1,f);g();Sys.sleep(2);g()
g<-delay_by(1,f)
delay_by <- function(delay, f) {
time=NULL
function(...) {
if(is.null(time)){
res=f(...)
time<<-Sys.time()
res
}
if(as.double(Sys.time()-time)>=delay){
res=f(...)
time<<-Sys.time()
res
}else{
Sys.sleep(delay-as.double(Sys.time()-time))
res=f(...)
time<<-Sys.time()
res
}
}
}
g<-delay_by(1,f);g();Sys.sleep(2);g()
f=function(){print("Executed once");print(Sys.time());return(NULL)}
g
library(pryr)
install.packages("pryr")
library(pryr)
unenclose(g)
is.null(1444892368.85009)
debugonce(g)
g()
delay_by <- function(delay, f) {
time=NULL
function(...) {
if(is.null(time)){
res=f(...)
time<<-Sys.time()
invisible(res)
}
if(as.double(Sys.time()-time)>=delay){
res=f(...)
time<<-Sys.time()
invisible(res)
}else{
Sys.sleep(delay-as.double(Sys.time()-time))
res=f(...)
time<<-Sys.time()
invisible(res)
}
}
}
f=function(){print("Executed once");print(Sys.time());return(NULL)}
g<-delay_by(1,f);g();Sys.sleep(2);g()
delay_by <- function(delay, f) {
time=NULL
function(...) {
if(is.null(time)){
f(...)
time<<-Sys.time()
}
if(as.double(Sys.time()-time)>=delay){
f(...)
time<<-Sys.time()
}else{
Sys.sleep(delay-as.double(Sys.time()-time))
f(...)
time<<-Sys.time()
}
}
}
f=function(){print("Executed once");print(Sys.time());return(NULL)}
g<-delay_by(1,f);g();Sys.sleep(2);g()
delay_by <- function(delay, f) {
time=NULL
function(...) {
if(is.null(time)){
f(...)
time<<-Sys.time()
}else if(as.double(Sys.time()-time)>=delay){
f(...)
time<<-Sys.time()
}else{
Sys.sleep(delay-as.double(Sys.time()-time))
f(...)
time<<-Sys.time()
}
}
}
f=function(){print("Executed once");print(Sys.time());return(NULL)}
g<-delay_by(1,f);g();Sys.sleep(2);g()
g<-delay_by(3,f);g();Sys.sleep(2);g()
g<-delay_by(6,f);g();Sys.sleep(2);g()
as.double(Sys.time()-NULL
)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(ggplot2)
delay_by3 <- function(delay, f)
{
executime <- Sys.time()
function(...)
{
if(Sys.time()-executime < delay) {
Sys.sleep(delay-(Sys.time()-executime))
}#距离上次call时间在delay内,则delay
res <- f(...)
executime <<- Sys.time()
res
}
}
g<-delay_by3(1,f);g()
delay_by3 <- function(delay, f)
{
executime <- Sys.time()
function(...)
{
if(Sys.time()-executime < delay) {
print(delay-(Sys.time()-executime))
Sys.sleep(delay-(Sys.time()-executime))
}#距离上次call时间在delay内,则delay
res <- f(...)
executime <<- Sys.time()
res
}
}
g<-delay_by3(1,f);g()
delay_by3 <- function(delay, f)
{
executime <- 0
function(...)
{
if(Sys.time()-executime < delay) {
print(delay-(Sys.time()-executime))
Sys.sleep(delay-(Sys.time()-executime))
}#距离上次call时间在delay内,则delay
res <- f(...)
executime <<- Sys.time()
res
}
}
executime <- 0
Sys.time()-executime < delay
delay=2
Sys.time()-executime < delay
Sys.time()
Sys.time()<20
Sys.time()-20
Sys.time()-200000
delay_by2 <- function(delay, f)
{
delay_until <- Sys.time()
function(...)
{
if(delay_until - Sys.time() > 0) {
Sys.sleep(delay_until - Sys.time())
}
res <- f(...)
delay_until <<- Sys.time() + delay
res
}
}
g<-delay_by2(1,f);g()
g<-delay_by2(1,f)
Sys.time()-(-Inf)
Sys.time()+Inf
Inf
NA<delay
Sys.time()-delay<-Inf
Sys.time()-delay<-inf
inf
Inf
Sys.time()-delay<-(Inf)
Sys.time()-delay< -(Inf)
dot_every <- function(n, f) {
i <- 1
function(...) {
if (i %% n == 0) cat(".")
i <<- i + 1
f(...)
}
}
delay_by <- function(delay, f) {
function(...) {
Sys.sleep(delay)
f(...)
}
}
download_file
download_file <- function(url, ...) {
download.file(url, basename(url), ...)
} #a wrapper of utils::download.file()
lapply(urls, download_file)
download_file <- function(url, ...) {
download.file(url, basename(url), ...)
} #a wrapper of utils::download.file()
download <- dot_every(10, memoise(delay_by(1, download_file)))
library(memoise)
memoise(download)
test=memoise(download)
class(test)
test
attributes(test)
test()
memoise(dot_every(10, delay_by(1, download_file)))
test=memoise(dot_every(10, delay_by(1, download_file)))
test()
memoise
download()
download_file
download.file
download_file
download_file
download.file=function(x,y){print(x);print(y)}
download <- memoise(dot_every(10, delay_by(1, download_file)))
urls=c("aa","bb","cc")
download <- memoise(dot_every(10, delay_by(1, download_file)))
download(urls)
urls=rep(c("aa","bb","cc"),20)
download(urls)
dot_every()
dot_every
dot_every(10, delay_by(1, download_file)
)
dot_every(10, delay_by(1, download_file))(url)
dot_every(10, delay_by(1, download_file))(urls)
urls
download.file
download_file
download_file(urls)
download <- dot_every(10, memoise(delay_by(1, download_file)))
download(urls)
lapply(urls,download)
urls
urls=rep(c("aa","bb"),5)
urls
urls=list(urls)
urls
urls=rep(c("aa","bb"),5)
urls=as.list(urls)
urls
lapply(urls,download)
lapply(urls,download)
urls=rep(c("aa","bb"),6)
urls=as.list(urls)
lapply(urls,download)
urls2=c(LETTERS)
urls2
urls2=as.list(urls)
urls2=as.list(urls2)
urls2=c(LETTERS)
urls2=as.list(urls2)
lapply(urls2,download)
