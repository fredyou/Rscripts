lapply(bootstraps,lm,formula=mpg~disp)
lm(mpg~disp,bootstraps[[10]])
lapply(bootstraps,lm,formula=mpg~disp) #explicitly assign formula
rsq <- function(mod) summary(mod)$r.squared
xs <- replicate(5, runif(10), simplify = FALSE)
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
xs
ws
?replicate
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
seq_along(xs)
xs
seq_len
seq_len(x)
seq_len(xs)
seq_along(1:19)
unlist(Map(weighted.mean,xs,ws))
trunc(5)
trunc(5/3)
5/3
x <- seq(1, 3, length = 1e2) + runif(1e2)
plot(x)
1e2
x <- seq(1, 3, length = 10) + runif(10)
plot(x)
rollmean <- function(x, n) {
out <- rep(NA, length(x))
offset <- trunc(n / 2)
for (i in (offset + 1):(length(x) - n + offset + 1)) {
out[i] <- mean(x[(i - offset):(i + offset - 1)])
}
out
}
lines(rollmean(x, 5), col = "blue", lwd = 2)
lines(rollmean(x, 10), col = "red", lwd = 2)
lines(rollmean(x, 10), col = "red", lwd = 2)
lines(rollmean(x, 5), col = "blue", lwd = 2)
5/2
rollmean <- function(x, n) {
out <- rep(NA, length(x))
offset <- trunc(n / 2)
for (i in (offset + 1):(length(x) - n + offset + 1)) {
out[i] <- mean(x[(i - offset):(i + offset - 1)])
}
out
}
browser()
rollmean(x, 5)
trace(rollmean(x,5))
rollmean(x, 5)
traceback()
trace()
trace(rollmean)
rollmean(x, 5)
where()
debug()
debug(rollmean)
rollmean(x, 5)
3+offset-1
mean(x[1:3])
mean(x[1:4])
mean(x[2:5])
?rt
trials <- replicate(
100,
t.test(rpois(10, 10), rpois(7, 10)),
simplify = FALSE
)
trials
trials()
t.test(rpois(10, 10), rpois(7, 10))
?replicated
?replicate
t.test(rpois(10, 10), rpois(7, 10))$p
test=t.test(rpois(10, 10), rpois(7, 10))
class(test)
isS4(test)
attributes(test)
test$p.value
replicate(10,print)
replicate(10,print())
test=trials()
trials <- replicate(
100,
t.test(rpois(10, 10), rpois(7, 10)),
simplify = FALSE
)
test=trials()
test
trials <- replicate(
100,
t.test(rpois(10, 10), rpois(7, 10)),
simplify = FALSE
)
trials
sapply(trials, `[[`,,"p.value")
trials[[1]]
trials[[1]]$p.value
sapply(trials, `[`,,"p.value")
sapply(trials, `[`)
test=sapply(trials, `[`)
test
?apply
head(ozone)
library(plyr)
head(ozone)
class(ozone)
ozone
attributes(ozone)
tapply
pulse <- round(rnorm(22, 70, 10 / 3)) + rep(c(0, 5), c(10, 12))
group <- rep(c("A", "B"), c(10, 12))
data=split(pulse, group)
data
sapply(data, length)
class(sapply(data, length))
sapply(data, is.numeric)
class(sapply(data, is.numeric))
class(vapply(data, is.numeric,numeric))
class(vapply(data, is.numeric,"numeric"))
?vapply
seq
i39 <- sapply(3:9, seq)
i39
fivenum
fivenum(1:3)
sapply(i39, fivenum)
vapply(i39, fivenum,
c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
f2 <- function(x, y) outer(rep(x, length.out = 3), y)
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
a.2 <- vapply(v, f2, outer(1:3, 1:5), y = 2*(1:5)
(v <- structure(10*(5:8), names = LETTERS[1:4]))
f2 <- function(x, y) outer(rep(x, length.out = 3), y)
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
a.2 <- vapply(v, f2, outer(1:3, 1:5), y = 2*(1:5))
a.2
match.fun("mean")
class(vapply(data, is.numeric))
data
class(vapply(data, is.numeric,c("numeric","numeric")))
class(vapply(data, is.numeric,c("logic","logic")))
is.numeric(data)
class(TRUE)
class(vapply(data, is.numeric,)
class(vapply(data, is.numeric,"logical")
class(vapply(data, is.numeric,"logical"))
class(vapply(data, is.numeric,"character"))
class(vapply(data, is.numeric,FUN.VALUE=0L))
vapply(data, is.numeric,FUN.VALUE=0L)
vapply(data, is.numeric,FUN.VALUE=TRUE)
vapply(data, is.numeric,FUN.VALUE=FALSE)
vapply(data, is.numeric,FUN.VALUE="a")
vapply(data, is.numeric,FUN.VALUE="TRUE")
vapply(data, is.numeric,FUN.VALUE=0)
vapply(data, as.character,FUN.VALUE=0)
vapply(data, as.character,FUN.VALUE="aa")
daa
data
sapply(data,as.character)
vapply(data, as.character,FUN.VALUE=list()
)
vapply(data, as.character,FUN.VALUE=logical(1))
vapply(data, is.array,FUN.VALUE=logical(1))
vapply(data, as.character)
vapply(data, as.character,FUN.VALUE = character(2))
vapply(data, as.character,FUN.VALUE = character(1))
vapply(data, as.character,FUN.VALUE = character(10))
vapply(data, as.character,FUN.VALUE = character(10L))
data
length(data)
dim(data)
length(data[1])
length(data[[1]])
length(data[[2]])
vapply(data, as.character,FUN.VALUE = character(22))
vapply(data, as.character,FUN.VALUE = c(character(10),character(12)))
rep(c(1,2),c(1,2))
vapply(data, as.character,FUN.VALUE = rep(c(character(1),character(1)),c(10,12)))
rep(c(character(1),character(1)),c(10,12))
sapply(data,as.character)
class(sapply(data,as.character))
vapply(data, as.character,FUN.VALUE = list())
vapply(data, as.character,FUN.VALUE = list(a=character(10),b=character(12)))
sapply
lapply
vapply
data
data$A=c(data$A,c(1,2))
data
vapply(data, as.character,FUN.VALUE = character(10))
data
vapply(data, as.character,FUN.VALUE = character(12))
data=split(pulse, group)
vapply(data, as.character,FUN.VALUE = character(12))
vapply(data, as.character,FUN.VALUE = c(character(10),character(12)))
vapply(data, as.character,FUN.VALUE = character(22))
vapply(data, as.character,FUN.VALUE = character(10))
vapply(data, is.numeric,FUN.VALUE = character(1))
vapply(data, is.numeric,FUN.VALUE = logical(1))
vapply(data, is.numeric,FUN.VALUE = numeric(1))
as.character(TRUE)
vapply(data, is.numeric,FUN.VALUE = character(1))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
vapply(data,as.character,FUN.VALUE = character(10))
vapply(data,as.character,FUN.VALUE = character(12))
data$A=c(data$A,c(1,2))
vapply(data,as.character,FUN.VALUE = character(12))
vapply(data, function(x){if(is.numeric(x)) as.character(is.numeric(x))},FUN.VALUE = character(1)) #not worked, cuz coercion to character is not in vapply coercion table
data
split(pulse, group)
pulse
group
length(group)
subset(pulse,6)
?subset
which(group==unique(group))
which(group==unique(group)[1])
split
split.default()
split.default
tapply(pulse,group,`[`)
split(pulse, group)
split
split.default
mysplit=function(data,group,f=`[`){
tapply(data,group,f)
}
?splikt
?split
ma <- cbind(x = 1:10, y = (-4:5)^2)
ma
col(ma)
split(ma, col(ma))
g <- airquality$Month
l <- split(airquality, g)
l
g
df=data.frame(p=pulse,g=group)
df
split(df,group)
mysplit(df,group = )
mysplit(df,group )
mysplit=function(data,group){
if(is.data.frame(data)==FALSE) tapply(data,group,`[`)
else by(data,group,`[`)
}
by(data,group,`[`)
group
data
by(df,group,`[`)
class(by(df,group,`[`))
class?by
class?"by"
class?"numeric"
names(by(df,group,`[`))
as.list(by(df,group,`[`))
list(by(df,group,`[`))
list(by(df,group,`[`))[[1]]
test=by(df,group,`[`)
test
test[["A"]]
test[["B"]]
by
tapply
?unique
duplicated(group)
group
group2=group
group2[3:4]="B"
group2
split(data,group2)
data
split(pulse,group2)
pulse
split(pulse,group)
group2
where(group=="A")
which(group=="A")
data
pulse
split(df,group)
split(df[,1],group)
group
split(df[,1],group2)
split(df,group2)
vapply(unique(group),which(),numeric)
vapply(unique(group),which(),numeric(1))
vapply(unique(group),which,numeric(1))
vapply(unique(group),which)
vapply(unique(group),function(x){which(group==x)})
vapply(unique(group),function(x){which(group==x)},0L)
vapply(unique(group),function(x){which(group==x)},numeric(length(group)))
vapply(unique(group),function(x){which(group==x)},numeric(10))
vapply(unique(group),function(x){which(group==x)},numeric(22))
group
lapply(unique(group),function(x){which(group==x)})
lapply(unique(group),function(x){temp=which(group==x);names(temp)=x;tempdir()})
lapply(unique(group),function(x){temp=which(group==x);names(temp)=x;temp})
lapply(unique(group),function(x){which(group==x);})
pos=lapply(unique(group),function(x){temp=which(group==x);names(temp)=x;temp})
pos
pos=lapply(unique(group),function(x){which(group==x);})
pos
names(pos)=unique(group)
pos
lapply
by
tapply
ozone
attributes(ozone)
ozone(1,1,)
ozone[1,1,]
ozone[1,1,1]
ozone$time
ozone["time"]
atrributes(ozone,"time")
attr(ozone,"time")
dimnames(ozone)
ozone["-21.2","-113.8","1"]
deseasf
l <- replicate(5, sample(1:10, 15, replace = T), simplify = FALSE)
l
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
df
Find(is.factor, df)
str(Find(is.factor, df))
Position(is.factor, df)
Filter(is.factor, df)
df$y
df <- data.frame(x = 1:3, y = factor("a", "b", "c"))
df
df <- data.frame(x = 1:3, y = factor(c("a", "b", "c")))
df
df$y
Filter(is.factor, df)
class(Filter(is.factor, df))
test=Filter(is.factor, df)
test$x
str(Filter(is.factor, df))
is.na()
is.na
is.logical()
is.logical
?is.na
is.na(NA)
is.na("")
is.na(c("a","b",na))
is.na(c("a","b",NA))
is.character(c("a","b",NA))
is.character(c("a","b","cv"))
is.null(c("a","b","cv"))
is.null(c("a","b",NA))
is.null(NA)
anyNA(c("a","b",NA))
df
df <- data.frame(x = 1:3, y = c("a", "b", "c"),z=2:4)
df
mysummary=function(df){
summary(Filter(is.numeric,df))
}
mysummary(df)
Position(is.character,df)
df
Position(is.numeric,df)
anyNA(c("a","b",NA))
is.character(c("a","b",NA))
is.character(c(NA,"b",NA))
is.character(c(NA,NA,NA))
is.character()
is.character
is.numeric(c(NA,1,NA))
is.numeric(c(NA,NA,NA))
is.numeric(c(NA,NA,1))
is.numeric(df$x)
df=as.list(df)
df
is.numeric(df$x)
myany=function(inputlist,f){
grepl(TRUE,lapply(inputlist,f))
}
myany(df,is.numeric)
myany=function(inputlist,f){
TRUE %in% lapply(inputlist,f)
}
myany=function(inputlist,f){
myany(df,is.numeric)
df
myany(df,is.character)
myany(df,is.logical)
myall=function(inputlist,f){
!(FALSE %in% lapply(inputlist,f))
}
myall(df,is.character)
myall(df,is.vector)
myall(df,is.numeric)
?rle
x <- rev(rep(6:10, 1:5))
x
z <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE)
rle(z)
df
rle(df)
lapply(df,is.numeric)
rle(unlist(lapply(df,is.numeric)))
uniroot(sin, pi * c(1 / 2, 3 / 2))
?uniroot
uniroot(sin, c(0,pi))
plot(sin)
si
sin
plot(sin,xlim = pi)
plot(sin,xlim=c(0,pi))
uniroot(sin, c(0,pi))
uniroot(sin, c(0,pi))$root
uniroot(sin, c(0,2pi))$root
uniroot(sin, c(0,2*pi))$root
uniroot(sin, c(0,2*pi))
uniroot(sin, c(2,2*pi))
optimise(sin, c(0, 2 * pi))
sin(1.5)
optimise(sin, c(0, 2 * pi),maximum = T)
sin(1.57)
poisson_nll <- function(x) {
n <- length(x)
sum_x <- sum(x)
function(lambda) {
n * lambda - sum_x * log(lambda) # + terms not involving lambda
}
}
x1 <- c(41, 30, 31, 38, 29, 24, 30, 29, 31, 38)
x2 <- c(6, 4, 7, 3, 3, 7, 5, 2, 2, 7, 5, 4, 12, 6, 9)
nll1 <- poisson_nll(x1)
nll2 <- poisson_nll(x2)
nll1
optimise(nll1, c(0, 100))$minimum
nll1(32.099999)
nll1(35)
install.packages("Rvmmin ")
install.packages("Rvmmin")
optim
plot(function(x){x^2},xlim=c(-5,5))
x=-10:2
test=function(x){x^2}
test(x)
optimise(test,x,maximum = T)
res=f(x)
test(x)
test=test(x)
length(tset)
length(test)
test[1]
test[11]
test[11]=2
test
which.min(test)
which.min(test)
Position(test==min(test))
which(test==min(test))
Position(test,test==min(test))
trans <- list(
disp = function(x) x * 0.0163871,
am = function(x) factor(x, levels = c("auto", "manual"))
)
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
mtcars$am
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
for(var in names(trans)) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
}
mtcars$am
mtcars$disp
for(var in names(trans)) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
}
mtcars$disp
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
mtcars$disp
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]]);print(environment())
})
for(var in names(trans)) {
mtcars[[var]] <- trans[[var]](mtcars[[var]]);print(environment())
}
test=function(){print(environment())}
tset()
test()
data
test=function(){data="hhh"}
test()
data
test=function(){data["aa"]="hhh"}
test()
lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
res=lapply(names(trans), function(var) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
})
res
mtcars$disp
data
q()
